
import { useState, useEffect } from 'react';
import { useAuth } from '../lib/auth';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CalendarDays, Check, Info, QrCode, User, BarChart, Clock, Download } from 'lucide-react';
import { supabase } from '../lib/supabase';
import { useLocation } from 'wouter';
import { format } from 'date-fns';

export default function StudentDashboard() {
  const { user } = useAuth();
  const [location, setLocation] = useLocation();
  const [activeSession, setActiveSession] = useState<any>(null);
  const [isCheckedIn, setIsCheckedIn] = useState(false);
  const [attendanceStats, setAttendanceStats] = useState({
    total: 0,
    present: 0,
    absent: 0,
    rate: '0%'
  });

  const fetchAttendanceStats = async () => {
    if (!user) return;
    try {
      const { data: attendance } = await supabase
        .from('attendance')
        .select('*')
        .eq('user_id', user.id);

      const total = attendance?.length || 0;
      const present = attendance?.filter((a: any) => a.status === 'present').length || 0;
      const absent = total - present;
      const rate = total > 0 ? Math.round((present / total) * 100) : 0;

      setAttendanceStats({
        total,
        present,
        absent,
        rate: `${rate}%`
      });
    } catch (error) {
      console.error('Error fetching attendance stats:', error);
    }
  };

  const fetchActiveSession = async () => {
    try {
      const { data: session, error } = await supabase
        .from('sessions')
        .select('*')
        .eq('is_active', true)
        .maybeSingle();

      if (error) {
        if (error.code === 'PGRST116') {
          setActiveSession(null);
          return;
        }
        console.error('Error fetching active session:', error);
        return;
      }

      setActiveSession(session);

      if (session && user) {
        const { data: attendance } = await supabase
          .from('attendance')
          .select('*')
          .eq('session_id', session.id)
          .eq('user_id', user.id)
          .single();

        setIsCheckedIn(!!attendance);
      }
    } catch (error) {
      console.error('Error:', error);
    }
  };

  useEffect(() => {
    if (!user) return;
    
    fetchActiveSession();
    fetchAttendanceStats();
    
    const interval = setInterval(() => {
      fetchActiveSession();
      fetchAttendanceStats();
    }, 5000);
    
    const subscription = supabase
      .channel('active_sessions')
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: 'sessions' 
      }, () => {
        fetchActiveSession();
      })
      .subscribe();

    return () => {
      subscription.unsubscribe();
      clearInterval(interval);
    };
  }, [user]);

  return (
    <div className="container mx-auto py-6 space-y-6">
      {/* Header */}
      <div className="flex items-center space-x-4">
        <User className="h-12 w-12 text-muted-foreground" />
        <div>
          <h1 className="text-2xl font-semibold">Welcome, {user?.name}</h1>
          <p className="text-muted-foreground">Student ID: {user?.id}</p>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Active Session Card */}
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center space-x-2 mb-4">
              <Clock className="h-5 w-5 text-muted-foreground" />
              <h2 className="text-lg font-semibold">Active Session</h2>
            </div>
            {activeSession ? (
              <div className="space-y-4">
                <div>
                  <p className="font-medium">{activeSession.name}</p>
                  <p className="text-sm text-muted-foreground">Attendance required</p>
                </div>
                <Button 
                  onClick={() => setLocation('/scan')} 
                  className="w-full" 
                  disabled={isCheckedIn}
                >
                  <QrCode className="mr-2 h-4 w-4" />
                  {isCheckedIn ? 'Attendance Marked' : 'Scan QR Code'}
                </Button>
              </div>
            ) : (
              <div className="text-center py-6">
                <CalendarDays className="h-12 w-12 mx-auto text-muted-foreground mb-2" />
                <p className="text-muted-foreground">No active sessions at the moment</p>
                <p className="text-sm text-muted-foreground">Check back later or scan a QR code</p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Attendance Summary Card */}
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center space-x-2 mb-4">
              <BarChart className="h-5 w-5 text-muted-foreground" />
              <h2 className="text-lg font-semibold">Attendance Summary</h2>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div className="bg-muted/50 p-3 rounded-lg">
                <p className="text-sm text-muted-foreground">Total Sessions</p>
                <p className="text-2xl font-semibold">{attendanceStats.total}</p>
              </div>
              <div className="bg-muted/50 p-3 rounded-lg">
                <p className="text-sm text-muted-foreground">Attendance Rate</p>
                <p className="text-2xl font-semibold">{attendanceStats.rate}</p>
              </div>
              <div className="bg-muted/50 p-3 rounded-lg">
                <p className="text-sm text-muted-foreground">Present</p>
                <p className="text-2xl font-semibold">{attendanceStats.present}</p>
              </div>
              <div className="bg-muted/50 p-3 rounded-lg">
                <p className="text-sm text-muted-foreground">Absent</p>
                <p className="text-2xl font-semibold">{attendanceStats.absent}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Attendance History */}
      <Card>
        <CardContent className="pt-6">
          <div className="flex justify-between items-center mb-4">
            <div className="flex items-center space-x-2">
              <History className="h-5 w-5 text-muted-foreground" />
              <h2 className="text-lg font-semibold">Attendance History</h2>
            </div>
            <Button variant="outline" size="sm">
              <Download className="h-4 w-4 mr-2" />
              Download Report
            </Button>
          </div>
          <div className="relative overflow-x-auto">
            <table className="w-full text-sm text-left">
              <thead className="text-xs uppercase bg-muted/50">
                <tr>
                  <th className="px-4 py-2">Session</th>
                  <th className="px-4 py-2">Date</th>
                  <th className="px-4 py-2">Time</th>
                  <th className="px-4 py-2">Status</th>
                  <th className="px-4 py-2">Check-in</th>
                </tr>
              </thead>
              <tbody>
                {attendanceStats.total === 0 ? (
                  <tr>
                    <td colSpan={5} className="px-4 py-8 text-center text-muted-foreground">
                      No attendance records found.
                    </td>
                  </tr>
                ) : null}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
