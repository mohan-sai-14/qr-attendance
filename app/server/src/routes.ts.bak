import express from 'express';
import { storage } from './storage';
import { login, logout, requireAuth, requireAdmin } from './auth';
import { User, Session, Attendance } from './types';

export const router = express.Router();

// Middleware to check if user is authenticated
const isAuthenticated = (req: express.Request, res: express.Response, next: express.NextFunction) => {
  if (req.session.user) {
    return next();
  }
  res.status(401).json({ error: 'Not authenticated' });
};

// Middleware to check if user is admin
const isAdmin = (req: express.Request, res: express.Response, next: express.NextFunction) => {
  if (req.session.user && req.session.user.role === 'admin') {
    return next();
  }
  res.status(403).json({ error: 'Not authorized' });
};

// Get current user
router.get('/me', isAuthenticated, (req: express.Request, res: express.Response) => {
  const user = req.session.user as User;
  res.json({
    id: user.id,
    username: user.username,
    name: user.name,
    email: user.email,
    role: user.role,
    status: user.status
  });
});

// Auth routes
router.post('/login', (req: express.Request, res: express.Response) => {
  const { userId, password } = req.body;
  
  storage.validateUser(userId, password)
    .then(isValid => {
      if (!isValid) {
        return res.status(401).json({ error: 'Invalid credentials' });
      }
      
      return storage.getUser(userId);
    })
    .then(user => {
      if (!user) {
        return res.status(404).json({ error: 'User not found' });
      }
      
      req.session.user = user;
      res.json({ 
        success: true, 
        user: {
          id: user.id,
          username: user.username,
          name: user.name,
          email: user.email,
          role: user.role,
          status: user.status
        } 
      });
    })
    .catch(error => {
      console.error('Login error:', error);
      res.status(500).json({ error: 'Internal server error' });
    });
});

// Logout endpoint
router.post('/logout', (req: express.Request, res: express.Response) => {
  req.session.destroy((err) => {
    if (err) {
      return res.status(500).json({ error: 'Failed to logout' });
    }
    res.clearCookie('connect.sid');
    res.json({ success: true });
  });
});

// Get active session - public endpoint with no auth for QR scanner
router.get('/sessions/active', async (req: express.Request, res: express.Response): Promise<void> => {
  try {
    // Allow CORS for this endpoint
    res.header('Access-Control-Allow-Origin', req.headers.origin || 'http://localhost:5174');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    console.log("Active session request received");
    // Call getActiveSession without user_id for public access
    const session = await storage.getActiveSession();
    
    console.log("Session data: ", JSON.stringify(session));
    
    if (!session) {
      console.log("No active session found");
      res.status(404).json({
        error: 'Not found',
        details: 'No active session currently available',
        message: 'No active session found'
      });
      return;
    }
    
    console.log("Active session found:", session.id);
    res.json(session);
  } catch (error) {
    console.error('Error getting active session:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      details: 'Failed to fetch active session'
    });
  }
});

// Protected routes
router.get('/session', requireAuth, async (req: express.Request, res: express.Response): Promise<void> => {
  try {
    const user = req.session.user as User;
    const session = await storage.getActiveSession(user.role === 'admin' ? undefined : user.username);
    if (!session) {
      res.status(404).json({
        error: 'No active session',
        details: 'No active session found for the current user'
      });
      return;
    }
    res.json(session);
  } catch (error) {
    console.error('Get session error:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      details: 'Failed to fetch session information'
    });
  }
});

// Admin only routes
router.get('/sessions', isAdmin, async (req: express.Request, res: express.Response): Promise<void> => {
  try {
    const sessions = await storage.getAllSessions();
    res.json(sessions);
  } catch (error) {
    console.error('Get all sessions error:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      details: 'Failed to fetch sessions'
    });
  }
});

// Create new session (admin only)
router.post('/sessions', isAdmin, async (req: express.Request, res: express.Response): Promise<void> => {
  try {
    const user = req.session.user as User;
    const session = await storage.createSession({
      ...req.body,
      created_by: user.username
    });
    if (!session) {
      res.status(500).json({
        error: 'Session creation failed',
        details: 'Failed to create new session'
      });
      return;
    }
    res.json(session);
  } catch (error) {
    console.error('Error in POST /sessions:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      details: 'Failed to create session'
    });
  }
});

// Expire session (admin only)
router.post('/sessions/:id/expire', isAdmin, async (req: express.Request, res: express.Response): Promise<void> => {
  try {
    const success = await storage.expireSession(req.params.id);
    if (!success) {
      res.status(500).json({
        error: 'Session expiration failed',
        details: 'Failed to expire session'
      });
      return;
    }
    res.json({ message: 'Session expired successfully' });
  } catch (error) {
    console.error('Error in POST /sessions/:id/expire:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      details: 'Failed to expire session'
    });
  }
});

// Attendance API endpoints
router.get('/attendance', isAdmin, async (req: express.Request, res: express.Response): Promise<void> => {
  try {
    const attendance = await storage.getAllAttendance();
    res.json(attendance);
  } catch (error) {
    console.error('Error getting attendance:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      details: 'Failed to fetch attendance records'
    });
  }
});

// Get attendance for current user
router.get('/attendance/me', isAuthenticated, async (req: express.Request, res: express.Response): Promise<void> => {
  try {
    const user = req.session.user as User;
    const attendance = await storage.getUserAttendance(user.username);
    res.json(attendance);
  } catch (error) {
    console.error('Error getting user attendance:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      details: 'Failed to fetch user attendance records'
    });
  }
});

// Record attendance
router.post('/attendance', isAuthenticated, async (req: express.Request, res: express.Response): Promise<void> => {
  try {
    const user = req.session.user as User;
    const { sessionId } = req.body;

    if (!sessionId) {
      res.status(400).json({
        error: 'Missing session ID',
        details: 'Session ID is required'
      });
      return;
    }

    const record = await storage.recordAttendance(user.username, sessionId);
    if (!record) {
      res.status(500).json({
        error: 'Failed to record attendance',
        details: 'Unable to save attendance record'
      });
      return;
    }

    res.json({ message: 'Attendance recorded successfully', record });
  } catch (error) {
    console.error('Error recording attendance:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      details: 'Failed to record attendance'
    });
  }
});

// New endpoint to check if a student is checked in for the current active session
router.get('/attendance/active-session', async (req: express.Request, res: express.Response): Promise<void> => {
  try {
    // Allow CORS for this endpoint
    res.header('Access-Control-Allow-Origin', req.headers.origin || 'http://localhost:5174');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    // Get the active session first
    const activeSession = await storage.getActiveSession();
    if (!activeSession) {
      res.status(404).json({
        error: 'Not found',
        details: 'No active session found'
      });
      return;
    }
    
    // For testing, assume the user is not checked in
    // In a real app, we would use req.session.userId to check
    const user = req.session.user as User;
    
    // Get all attendance records for this user
    const userAttendance = await storage.getUserAttendance(user.username);
    
    // Check if user has an attendance record for the active session
    const isCheckedIn = userAttendance.some(record => record.session_id === activeSession.id);
    
    res.json({
      activeSession,
      isCheckedIn,
      user_id: user.username
    });
  } catch (error) {
    console.error('Error checking attendance for active session:', error);
    res.status(500).json({
      error: 'Internal server error',
      details: 'Failed to check attendance status'
    });
  }
});

export default router; 